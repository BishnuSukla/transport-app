{"ast":null,"code":"var _jsxFileName = \"/Users/bishnusukla/Documents/transportApp/v1/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './search.scss';\nimport PlacesAutocomplete, { geocodeByAddress, geocodeByPlaceId, getLatLng } from 'react-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = process.env.REACT_APP_GOOGLE_LOC_API_KEY;\nconst mapApiJs = 'https://maps.googleapis.com/maps/api/js';\nconst geocodeJson = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n// load google map api js\n\n// function loadAsyncScript(src) {\n//   return new Promise(resolve => {\n//     const script = document.createElement(\"script\");\n//     Object.assign(script, {\n//       type: \"text/javascript\",\n//       async: true,\n//       src\n//     })\n//     script.addEventListener(\"load\", () => resolve(script));\n//     document.head.appendChild(script);\n//   })\n// }\n\n// const extractAddress = (place) => {\n\n//   const address = {\n//     city: \"\",\n//     state: \"\",\n//     zip: \"\",\n//     country: \"\",\n//     plain() {\n//       const city = this.city ? this.city + \", \" : \"\";\n//       const zip = this.zip ? this.zip + \", \" : \"\";\n//       const state = this.state ? this.state + \", \" : \"\";\n//       return city + zip + state + this.country;\n//     }\n//   }\n\n//   if (!Array.isArray(place?.address_components)) {\n//     return address;\n//   }\n\n//   place.address_components.forEach(component => {\n//     const types = component.types;\n//     const value = component.long_name;\n\n//     if (types.includes(\"locality\")) {\n//       address.city = value;\n//     }\n\n//     if (types.includes(\"administrative_area_level_2\")) {\n//       address.state = value;\n//     }\n\n//     if (types.includes(\"postal_code\")) {\n//       address.zip = value;\n//     }\n\n//     if (types.includes(\"country\")) {\n//       address.country = value;\n//     }\n\n//   });\n\n//   return address;\n// }\n\nfunction Search() {\n  _s();\n  //   const searchInput = useRef(null);\n  //   const [address, setAddress] = useState({});\n\n  //   // init gmap script\n  //   const initMapScript = () => {\n  //     // if script already loaded\n  //     if(window.google) {\n  //       return Promise.resolve();\n  //     }\n  //     const src = `${mapApiJs}?key=${apiKey}&libraries=places&v=weekly`;\n  //     return loadAsyncScript(src);\n  //   }\n\n  //   // do something on address change\n  //   const onChangeAddress = (autocomplete) => {\n  //     const place = autocomplete.getPlace();\n  //     setAddress(extractAddress(place));\n  //   }\n\n  //   // init autocomplete\n  //   const initAutocomplete = () => {\n  //     if (!searchInput.current) return;\n\n  //     const autocomplete = new window.google.maps.places.Autocomplete(searchInput.current);\n  //     autocomplete.setFields([\"address_component\", \"geometry\"]);\n  //     autocomplete.addListener(\"place_changed\", () => onChangeAddress(autocomplete));\n\n  //   }\n\n  //   const reverseGeocode = ({ latitude: lat, longitude: lng}) => {\n  //     const url = `${geocodeJson}?key=${apiKey}&latlng=${lat},${lng}`;\n  //     searchInput.current.value = \"Getting your location...\";\n  //     fetch(url)\n  //         .then(response => response.json())\n  //         .then(location => {\n  //           const place = location.results[0];\n  //           const _address = extractAddress(place);\n  //           setAddress(_address);\n  //           searchInput.current.value = _address.plain();\n  //         })\n  //   }\n\n  //   const findMyLocation = () => {\n  //     if (navigator.geolocation) {\n  //       navigator.geolocation.getCurrentPosition(position => {\n  //         reverseGeocode(position.coords)\n  //       })\n  //     }\n  //   }\n\n  // load map script after mounted\n  //   useEffect(() => {\n  //     initMapScript().then(() => initAutocomplete())\n  //   }, []);\n\n  const [address, setAddress] = useState(\"\");\n  const [coordinates, setCoordinates] = useState({\n    lat: null,\n    lng: null\n  });\n  const handleSelect = async value => {\n    setAddress(value);\n    const result = await geocodeByAddress(value);\n    const latLng = await getLatLng(result[0]);\n    console.log(result);\n    setCoordinates(coordinates);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: address,\n      onChange: setAddress,\n      onSelect: handleSelect,\n      searchOptions: {\n        componentRestrictions: {\n          country: ['IN']\n        }\n      },\n      children: _ref => {\n        let {\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps({\n              placeholder: \"Type here\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"...loading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 42\n            }, this) : null, suggestions.map(suggestion => {\n              const style = {\n                backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 44\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 7\n  }, this)\n  // <div className=\"App\">\n  //   <div>\n  //     <div className=\"search\">\n  //       <span>S</span>\n  //       <input ref={searchInput} type=\"text\" placeholder=\"Search location....\"/>\n  //       <button onClick={findMyLocation}>L</button>\n  //     </div>\n\n  //     <div className=\"address\">\n  //       <p>City: <span>{address.city}</span></p>\n  //       <p>State: <span>{address.state}</span></p>\n  //       <p>Zip: <span>{address.zip}</span></p>\n  //       <p>Country: <span>{address.country}</span></p>\n  //     </div>\n\n  //   </div>\n  // </div>\n  ;\n}\n_s(Search, \"OKyIvgga64lXqz/8Wp/L0LtYMSo=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useEffect","useRef","useState","PlacesAutocomplete","geocodeByAddress","geocodeByPlaceId","getLatLng","apiKey","process","env","REACT_APP_GOOGLE_LOC_API_KEY","mapApiJs","geocodeJson","Search","address","setAddress","coordinates","setCoordinates","lat","lng","handleSelect","value","result","latLng","console","log","componentRestrictions","country","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","description"],"sources":["/Users/bishnusukla/Documents/transportApp/v1/src/components/search/search.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './search.scss'\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    geocodeByPlaceId,\n    getLatLng,\n  } from 'react-places-autocomplete';\n\nconst apiKey = process.env.REACT_APP_GOOGLE_LOC_API_KEY;\nconst mapApiJs = 'https://maps.googleapis.com/maps/api/js';\nconst geocodeJson = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n\n// load google map api js\n\n// function loadAsyncScript(src) {\n//   return new Promise(resolve => {\n//     const script = document.createElement(\"script\");\n//     Object.assign(script, {\n//       type: \"text/javascript\",\n//       async: true,\n//       src\n//     })\n//     script.addEventListener(\"load\", () => resolve(script));\n//     document.head.appendChild(script);\n//   })\n// }\n\n// const extractAddress = (place) => {\n\n//   const address = {\n//     city: \"\",\n//     state: \"\",\n//     zip: \"\",\n//     country: \"\",\n//     plain() {\n//       const city = this.city ? this.city + \", \" : \"\";\n//       const zip = this.zip ? this.zip + \", \" : \"\";\n//       const state = this.state ? this.state + \", \" : \"\";\n//       return city + zip + state + this.country;\n//     }\n//   }\n\n//   if (!Array.isArray(place?.address_components)) {\n//     return address;\n//   }\n\n//   place.address_components.forEach(component => {\n//     const types = component.types;\n//     const value = component.long_name;\n\n//     if (types.includes(\"locality\")) {\n//       address.city = value;\n//     }\n\n//     if (types.includes(\"administrative_area_level_2\")) {\n//       address.state = value;\n//     }\n\n//     if (types.includes(\"postal_code\")) {\n//       address.zip = value;\n//     }\n\n//     if (types.includes(\"country\")) {\n//       address.country = value;\n//     }\n\n//   });\n\n//   return address;\n// }\n\n\nfunction Search() {\n\n//   const searchInput = useRef(null);\n//   const [address, setAddress] = useState({});\n\n\n//   // init gmap script\n//   const initMapScript = () => {\n//     // if script already loaded\n//     if(window.google) {\n//       return Promise.resolve();\n//     }\n//     const src = `${mapApiJs}?key=${apiKey}&libraries=places&v=weekly`;\n//     return loadAsyncScript(src);\n//   }\n\n//   // do something on address change\n//   const onChangeAddress = (autocomplete) => {\n//     const place = autocomplete.getPlace();\n//     setAddress(extractAddress(place));\n//   }\n\n//   // init autocomplete\n//   const initAutocomplete = () => {\n//     if (!searchInput.current) return;\n\n//     const autocomplete = new window.google.maps.places.Autocomplete(searchInput.current);\n//     autocomplete.setFields([\"address_component\", \"geometry\"]);\n//     autocomplete.addListener(\"place_changed\", () => onChangeAddress(autocomplete));\n\n//   }\n\n\n//   const reverseGeocode = ({ latitude: lat, longitude: lng}) => {\n//     const url = `${geocodeJson}?key=${apiKey}&latlng=${lat},${lng}`;\n//     searchInput.current.value = \"Getting your location...\";\n//     fetch(url)\n//         .then(response => response.json())\n//         .then(location => {\n//           const place = location.results[0];\n//           const _address = extractAddress(place);\n//           setAddress(_address);\n//           searchInput.current.value = _address.plain();\n//         })\n//   }\n\n\n//   const findMyLocation = () => {\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(position => {\n//         reverseGeocode(position.coords)\n//       })\n//     }\n//   }\n\n\n\n\n\n  // load map script after mounted\n//   useEffect(() => {\n//     initMapScript().then(() => initAutocomplete())\n//   }, []);\n\n    const [address, setAddress] = useState(\"\");\n    const [coordinates, setCoordinates] = useState({lat:null, lng:null});\n\n    const handleSelect = async(value) => {\n        setAddress(value);\n        const result = await geocodeByAddress(value);\n        const latLng = await getLatLng(result[0]);\n        console.log(result);\n        setCoordinates(coordinates);\n        \n    }\n\n  return (\n      <div>\n          <PlacesAutocomplete value={address} onChange={setAddress} onSelect={handleSelect} searchOptions={{componentRestrictions: { country: ['IN'] }}}>\n                {\n                    ({getInputProps, suggestions, getSuggestionItemProps, loading})=>(\n                        <div>\n                            <input {...getInputProps({placeholder: \"Type here\"})}/>\n\n                            <div>\n                                {loading?<div>...loading</div>:null}\n\n                                {suggestions.map(suggestion =>{\n                                    const style = {\n                                        backgroundColor: suggestion.active? \"#41b6e6\" : \"#fff\"\n                                    }\n                                    return <div {...getSuggestionItemProps(suggestion, {style})}>\n                                        {suggestion.description}\n                                    </div>\n                                })}\n                            </div>\n                        </div>\n                    )\n                }\n          </PlacesAutocomplete>\n      </div>\n    // <div className=\"App\">\n    //   <div>\n    //     <div className=\"search\">\n    //       <span>S</span>\n    //       <input ref={searchInput} type=\"text\" placeholder=\"Search location....\"/>\n    //       <button onClick={findMyLocation}>L</button>\n    //     </div>\n\n    //     <div className=\"address\">\n    //       <p>City: <span>{address.city}</span></p>\n    //       <p>State: <span>{address.state}</span></p>\n    //       <p>Zip: <span>{address.zip}</span></p>\n    //       <p>Country: <span>{address.country}</span></p>\n    //     </div>\n\n    //   </div>\n    // </div>\n  )\n}\n\nexport default Search"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}