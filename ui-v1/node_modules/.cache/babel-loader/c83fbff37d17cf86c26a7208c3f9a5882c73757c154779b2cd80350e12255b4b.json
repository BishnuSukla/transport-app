{"ast":null,"code":"var _jsxFileName = \"/Users/bishnusukla/Documents/transportApp/v1/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = import.meta.env.VITE_APP_GMAP_API_KEY;\nconst mapApiJs = 'https://maps.googleapis.com/maps/api/js';\nconst geocodeJson = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n// load google map api js\n\nfunction loadAsyncScript(src) {\n  return new Promise(resolve => {\n    const script = document.createElement(\"script\");\n    Object.assign(script, {\n      type: \"text/javascript\",\n      async: true,\n      src\n    });\n    script.addEventListener(\"load\", () => resolve(script));\n    document.head.appendChild(script);\n  });\n}\nconst extractAddress = place => {\n  const address = {\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n    country: \"\",\n    plain() {\n      const city = this.city ? this.city + \", \" : \"\";\n      const zip = this.zip ? this.zip + \", \" : \"\";\n      const state = this.state ? this.state + \", \" : \"\";\n      return city + zip + state + this.country;\n    }\n  };\n  if (!Array.isArray(place === null || place === void 0 ? void 0 : place.address_components)) {\n    return address;\n  }\n  place.address_components.forEach(component => {\n    const types = component.types;\n    const value = component.long_name;\n    if (types.includes(\"locality\")) {\n      address.city = value;\n    }\n    if (types.includes(\"administrative_area_level_2\")) {\n      address.state = value;\n    }\n    if (types.includes(\"postal_code\")) {\n      address.zip = value;\n    }\n    if (types.includes(\"country\")) {\n      address.country = value;\n    }\n  });\n  return address;\n};\nfunction Search() {\n  _s();\n  const searchInput = useRef(null);\n  const [address, setAddress] = useState({});\n\n  // init gmap script\n  const initMapScript = () => {\n    // if script already loaded\n    if (window.google) {\n      return Promise.resolve();\n    }\n    const src = `${mapApiJs}?key=${apiKey}&libraries=places&v=weekly`;\n    return loadAsyncScript(src);\n  };\n\n  // do something on address change\n  const onChangeAddress = autocomplete => {\n    const place = autocomplete.getPlace();\n    setAddress(extractAddress(place));\n  };\n\n  // init autocomplete\n  const initAutocomplete = () => {\n    if (!searchInput.current) return;\n    const autocomplete = new window.google.maps.places.Autocomplete(searchInput.current);\n    autocomplete.setFields([\"address_component\", \"geometry\"]);\n    autocomplete.addListener(\"place_changed\", () => onChangeAddress(autocomplete));\n  };\n  const reverseGeocode = _ref => {\n    let {\n      latitude: lat,\n      longitude: lng\n    } = _ref;\n    const url = `${geocodeJson}?key=${apiKey}&latlng=${lat},${lng}`;\n    searchInput.current.value = \"Getting your location...\";\n    fetch(url).then(response => response.json()).then(location => {\n      const place = location.results[0];\n      const _address = extractAddress(place);\n      setAddress(_address);\n      searchInput.current.value = _address.plain();\n    });\n  };\n  const findMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        reverseGeocode(position.coords);\n      });\n    }\n  };\n\n  // load map script after mounted\n  useEffect(() => {\n    initMapScript().then(() => initAutocomplete());\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"S\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: searchInput,\n          type: \"text\",\n          placeholder: \"Search location....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: findMyLocation,\n          children: \"L\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"address\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"City: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: address.city\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"State: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: address.state\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Zip: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: address.zip\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Country: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: address.country\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"D7efg7/OrqUpU4RdD9DnyYBF5v8=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useEffect","useRef","useState","apiKey","import","meta","env","VITE_APP_GMAP_API_KEY","mapApiJs","geocodeJson","loadAsyncScript","src","Promise","resolve","script","document","createElement","Object","assign","type","async","addEventListener","head","appendChild","extractAddress","place","address","city","state","zip","country","plain","Array","isArray","address_components","forEach","component","types","value","long_name","includes","Search","searchInput","setAddress","initMapScript","window","google","onChangeAddress","autocomplete","getPlace","initAutocomplete","current","maps","places","Autocomplete","setFields","addListener","reverseGeocode","latitude","lat","longitude","lng","url","fetch","then","response","json","location","results","_address","findMyLocation","navigator","geolocation","getCurrentPosition","position","coords"],"sources":["/Users/bishnusukla/Documents/transportApp/v1/src/components/search/search.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport './App.css'\n\n\nconst apiKey = import.meta.env.VITE_APP_GMAP_API_KEY;\nconst mapApiJs = 'https://maps.googleapis.com/maps/api/js';\nconst geocodeJson = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n\n// load google map api js\n\nfunction loadAsyncScript(src) {\n  return new Promise(resolve => {\n    const script = document.createElement(\"script\");\n    Object.assign(script, {\n      type: \"text/javascript\",\n      async: true,\n      src\n    })\n    script.addEventListener(\"load\", () => resolve(script));\n    document.head.appendChild(script);\n  })\n}\n\nconst extractAddress = (place) => {\n\n  const address = {\n    city: \"\",\n    state: \"\",\n    zip: \"\",\n    country: \"\",\n    plain() {\n      const city = this.city ? this.city + \", \" : \"\";\n      const zip = this.zip ? this.zip + \", \" : \"\";\n      const state = this.state ? this.state + \", \" : \"\";\n      return city + zip + state + this.country;\n    }\n  }\n\n  if (!Array.isArray(place?.address_components)) {\n    return address;\n  }\n\n  place.address_components.forEach(component => {\n    const types = component.types;\n    const value = component.long_name;\n\n    if (types.includes(\"locality\")) {\n      address.city = value;\n    }\n\n    if (types.includes(\"administrative_area_level_2\")) {\n      address.state = value;\n    }\n\n    if (types.includes(\"postal_code\")) {\n      address.zip = value;\n    }\n\n    if (types.includes(\"country\")) {\n      address.country = value;\n    }\n\n  });\n\n  return address;\n}\n\n\nfunction Search() {\n\n  const searchInput = useRef(null);\n  const [address, setAddress] = useState({});\n\n\n  // init gmap script\n  const initMapScript = () => {\n    // if script already loaded\n    if(window.google) {\n      return Promise.resolve();\n    }\n    const src = `${mapApiJs}?key=${apiKey}&libraries=places&v=weekly`;\n    return loadAsyncScript(src);\n  }\n\n  // do something on address change\n  const onChangeAddress = (autocomplete) => {\n    const place = autocomplete.getPlace();\n    setAddress(extractAddress(place));\n  }\n\n  // init autocomplete\n  const initAutocomplete = () => {\n    if (!searchInput.current) return;\n\n    const autocomplete = new window.google.maps.places.Autocomplete(searchInput.current);\n    autocomplete.setFields([\"address_component\", \"geometry\"]);\n    autocomplete.addListener(\"place_changed\", () => onChangeAddress(autocomplete));\n\n  }\n\n\n  const reverseGeocode = ({ latitude: lat, longitude: lng}) => {\n    const url = `${geocodeJson}?key=${apiKey}&latlng=${lat},${lng}`;\n    searchInput.current.value = \"Getting your location...\";\n    fetch(url)\n        .then(response => response.json())\n        .then(location => {\n          const place = location.results[0];\n          const _address = extractAddress(place);\n          setAddress(_address);\n          searchInput.current.value = _address.plain();\n        })\n  }\n\n\n  const findMyLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        reverseGeocode(position.coords)\n      })\n    }\n  }\n\n\n\n\n\n  // load map script after mounted\n  useEffect(() => {\n    initMapScript().then(() => initAutocomplete())\n  }, []);\n\n\n\n  return (\n    <div className=\"App\">\n      <div>\n        <div className=\"search\">\n          <span>S</span>\n          <input ref={searchInput} type=\"text\" placeholder=\"Search location....\"/>\n          <button onClick={findMyLocation}>L</button>\n        </div>\n\n        <div className=\"address\">\n          <p>City: <span>{address.city}</span></p>\n          <p>State: <span>{address.state}</span></p>\n          <p>Zip: <span>{address.zip}</span></p>\n          <p>Country: <span>{address.country}</span></p>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n\nexport default Search"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}